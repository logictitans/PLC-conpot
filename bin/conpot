#!/usr/bin/env python
# Copyright (C) 2013  Lukas Rist <glaslos@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import logging
import os
import argparse
import sys
import pwd
import grp
import platform
import ast
from ConfigParser import ConfigParser

import gevent
from gevent.queue import Queue
import requests
from requests.exceptions import Timeout, ConnectionError
from lxml import etree

import conpot
from conpot.protocols.snmp.snmp_server import SNMPServer
from conpot.protocols.modbus.modbus_server import ModbusServer
import conpot.core as conpot_core


logger = logging.getLogger()
package_directory = os.path.dirname(os.path.abspath(conpot.__file__))


def logo():
    print """
                       _
   ___ ___ ___ ___ ___| |_
  |  _| . |   | . | . |  _|
  |___|___|_|_|  _|___|_|
              |_|

  Version {0}
  Glastopf Project
""".format(conpot.__version__)


def setup_logging():
    root_logger = logging.getLogger()

    console_log = logging.StreamHandler()
    console_log.setLevel(logging.DEBUG)
    console_log.setFormatter(logging.Formatter('%(asctime)-15s %(message)s'))
    root_logger.addHandler(console_log)
    logger.setLevel(logging.DEBUG)


def drop_privileges(uid_name='nobody', gid_name='nogroup'):
    wanted_uid = pwd.getpwnam(uid_name)[2]
    #special handling for os x. (getgrname has trouble with gid below 0)
    if platform.mac_ver()[0] and platform.mac_ver()[0] < float('10.9'):
        wanted_gid = -2
    else:
        wanted_gid = grp.getgrnam(gid_name)[2]

    os.setgid(wanted_gid)
    os.setuid(wanted_uid)

    new_uid_name = pwd.getpwuid(os.getuid())[0]
    new_gid_name = grp.getgrgid(os.getgid())[0]

    logger.info("Privileges dropped, running as {0}/{1}.".format(new_uid_name, new_gid_name))


def main():
    logo()
    setup_logging()

    parser = argparse.ArgumentParser()

    parser.add_argument("-w", "--www",
                        help="public www path",
                        default=os.path.join(package_directory, 'www/'),
                        metavar="www/"
    )
    parser.add_argument("-r", "--www-root",
                        help="www root page",
                        default="index.htm",
                        metavar="page.htm"
    )
    parser.add_argument("-t", "--template",
                        help="the template to use",
                        default=os.path.join(package_directory, 'templates/default.xml'),
                        metavar="template.xml"
    )
    parser.add_argument("-c", "--config",
                        help="the configuration file to use",
                        default=os.path.join(package_directory, 'conpot.cfg'),
                        metavar="config.cfg"
    )
    parser.add_argument("-a", "--raw_mib",
                        help="path to raw MIB files."
                             "(will automatically get compiled by build-pysnmp-mib)",
                        action='append',
                        default=[os.getcwd()])
    parser.add_argument("-m", "--mibpaths",
                        action='append',
                        help="path to compiled PySNMP MIB files. (must be compiled with build-pysnmp-mib)",
                        default=[])
    args = parser.parse_args()

    config = ConfigParser()
    if not os.path.isfile(args.config):
        args.config = os.path.join(package_directory, 'conpot.cfg')
        logger.info('No conpot.cfg found in current directory, using default configuration: {0}'.format(args.config))
    config.read(args.config)

    if not os.path.isfile(args.template):
        logger.error('Template not found: {0}'.format(args.template))
        sys.exit(1)
    if not os.path.isfile(args.config):
        logger.error('Config not found: {0}'.format(args.config))
        sys.exit(1)

    public_ip = None
    if config.getboolean('fetch_public_ip', 'enabled'):
        #we only want warning+ messages from the requests module
        logging.getLogger("requests").setLevel(logging.WARNING)
        try:
            url = config.get('fetch_public_ip', 'url')
            req = requests.get(url)
            public_ip = req.text
            logger.info('Fetched {0} as external ip.'.format(public_ip))
        except (Timeout, ConnectionError) as e:
            logger.warning('Could not fetch public ip: {0}'.format(e))

    logger.info('Starting Conpot using template found in: {0}'.format(args.template))
    logger.info('Starting Conpot using configuration found in: {0}'.format(args.config))
    logger.info('Starting Conpot using www templates found in: {0}'.format(args.www))

    session_manager = conpot_core.get_sessionManager()
    session_manager.initialize_datastore(args.template)

    dom = etree.parse(args.template)
    modbus_enabled = ast.literal_eval(dom.xpath('//conpot_template/protocols/modbus/@enabled')[0])
    snmp_enabled = dom.xpath('//conpot_template/protocols/snmp/@enabled')[0]

    if snmp_enabled:
        snmp_host = dom.xpath('//conpot_template/protocols/snmp/@host')[0]
        snmp_port = ast.literal_eval(dom.xpath('//conpot_template/protocols/snmp/@port')[0])
        snmp_server = SNMPServer(snmp_host, snmp_port, args.template, args.mibpaths, args.raw_mib)

    if modbus_enabled:
        modbus_host = dom.xpath('//conpot_template/protocols/modbus/@host')[0]
        modbus_port = ast.literal_eval(dom.xpath('//conpot_template/protocols/modbus/@port')[0])
        modbus_instance = ModbusServer(args.template, Queue())
        modbus_server = modbus_instance.get_server(modbus_host, modbus_port)

    servers = list()
    try:
        if modbus_enabled:
            servers.append(gevent.spawn(modbus_server.start))
        if snmp_enabled:
            servers.append(gevent.spawn(snmp_server.start))
        gevent.sleep(5)
        drop_privileges()
        gevent.joinall(servers)
    except KeyboardInterrupt:
        logging.info('Stopping Conpot')
        if snmp_enabled:
            snmp_server.stop()

    #just being nice and cosy!
    gevent.joinall(servers, 2)


if __name__ == "__main__":
    main()
