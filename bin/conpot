#!/usr/bin/env python
# Copyright (C) 2013  Lukas Rist <glaslos@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import gevent.monkey
gevent.monkey.patch_all()

import logging
import os
import argparse
import sys
import pwd
import grp
import platform
import ast
from ConfigParser import ConfigParser

import gevent
from lxml import etree

import conpot
import conpot.core as conpot_core

from conpot.core.loggers.log_worker import LogWorker
from conpot.protocols.snmp.snmp_server import SNMPServer
from conpot.protocols.modbus.modbus_server import ModbusServer
from conpot.protocols.s7comm.s7_server import S7Server
from conpot.protocols.http.web_server import HTTPServer
from conpot.protocols.kamstrup.meter_protocol.kamstrup_server import KamstrupServer
from conpot.protocols.kamstrup.management_protocol.kamstrup_management_server import KamstrupManagementServer

from conpot.emulators.proxy import Proxy
from conpot.utils import ext_ip


logger = logging.getLogger()
package_directory = os.path.dirname(os.path.abspath(conpot.__file__))


def logo():
    print """
                       _
   ___ ___ ___ ___ ___| |_
  |  _| . |   | . | . |  _|
  |___|___|_|_|  _|___|_|
              |_|

  Version {0}
  Glastopf Project
""".format(conpot.__version__)


def setup_logging(log_file):
    log_format = logging.Formatter('%(asctime)-15s %(message)s')
    root_logger = logging.getLogger()
    console_log = logging.StreamHandler()
    console_log.setLevel(logging.DEBUG)
    console_log.setFormatter(log_format)
    root_logger.addHandler(console_log)
    logger.setLevel(logging.DEBUG)
    file_log = logging.FileHandler(log_file)
    file_log.setFormatter(log_format)
    file_log.setLevel(logging.DEBUG)
    root_logger.addHandler(file_log)


def drop_privileges(uid_name='nobody', gid_name='nogroup'):
    wanted_uid = pwd.getpwnam(uid_name)[2]
    #special handling for os x. (getgrname has trouble with gid below 0)
    if platform.mac_ver()[0] and platform.mac_ver()[0] < float('10.9'):
        wanted_gid = -2
    else:
        wanted_gid = grp.getgrnam(gid_name)[2]

    os.setgid(wanted_gid)
    os.setuid(wanted_uid)

    new_uid_name = pwd.getpwuid(os.getuid())[0]
    new_gid_name = grp.getgrgid(os.getgid())[0]

    logger.info("Privileges dropped, running as {0}/{1}.".format(new_uid_name, new_gid_name))


def validate_template(xml_file):
    xml_schema = etree.parse(os.path.join(package_directory, 'tests', 'template_scheme_core.xsd'))
    xsd = etree.XMLSchema(xml_schema)
    xml = etree.parse(xml_file)
    xsd.validate(xml)
    if xsd.error_log:
        logger.error('Error parsing XML template: {0}'.format(xsd.error_log))
        sys.exit(1)


def main():
    logo()

    parser = argparse.ArgumentParser()

    parser.add_argument("-t", "--template",
                        help="The template to use",
                        default='',
                        metavar="template.xml"
                        )
    parser.add_argument("-c", "--config",
                        help="The configuration file to use",
                        default=os.path.join(package_directory, 'conpot.cfg'),
                        metavar="config.cfg"
                        )
    parser.add_argument("-l", "--logfile",
                        help="The logfile to use",
                        default="conpot.log"
                        )
    parser.add_argument("-a", "--raw_mib",
                        help="Path to raw MIB files."
                             "(will automatically get compiled by build-pysnmp-mib)",
                        action='append',
                        default=[]
                        )
    parser.add_argument("-m", "--mibpaths",
                        action='append',
                        help="Path to compiled PySNMP MIB files."
                             "(must be compiled with build-pysnmp-mib)",
                        default=[]
                        )
    args = parser.parse_args()

    setup_logging(args.logfile)

    config = ConfigParser()
    if not os.path.isfile(args.config):
        args.config = os.path.join(package_directory, 'conpot.cfg')
        logger.info('No conpot.cfg found in current directory, using default configuration: {0}'.format(args.config))
    config.read(args.config)

    # Did the user specify a template at all?
    if not args.template:

        available_templates = os.listdir(os.path.join(package_directory, 'templates'))

        print "--------------------------------------------------"
        print " Available templates:"
        print "--------------------------------------------------\n"

        for folder in available_templates:
            template_xml = os.path.join(package_directory, 'templates', folder, 'template.xml')
            if os.path.isfile(template_xml):
                template_unit = template_vendor = template_description = template_protocols = template_creator = 'N/A'
                dom_template = etree.parse(template_xml)
                template_details = dom_template.xpath('//core/template/*')
                if template_details:

                    # retrieve all template details
                    for entity in template_details:

                        if entity.attrib['name'] == 'unit':
                            template_unit = entity.text

                        elif entity.attrib['name'] == 'vendor':
                            template_vendor = entity.text

                        elif entity.attrib['name'] == 'description':
                            template_description = entity.text

                        elif entity.attrib['name'] == 'protocols':
                            template_protocols = entity.text

                        elif entity.attrib['name'] == 'creator':
                            template_creator = entity.text

                    print "   --template {0}".format(folder)
                    print "       Unit:        {0} - {1}".format(template_vendor, template_unit)
                    print "       Desc:        {0}".format(template_description)
                    print "       Protocols:   {0}".format(template_protocols)
                    print "       Created by:  {0}\n".format(template_creator)

        sys.exit(0)

    # Check if the template exists in our template root..
    if os.path.isfile(os.path.join(package_directory, 'templates', args.template, 'template.xml')):
        template = os.path.join(package_directory, 'templates', args.template)
    else:
            logger.error('Template not found: {0}'.format(args.template))
            sys.exit(1)

    # Check if the configuration file exists..
    if not os.path.isfile(args.config):
        logger.error('Config not found: {0}'.format(args.config))
        sys.exit(1)

    logger.info('Starting Conpot using template: {0}'.format(template))
    logger.info('Starting Conpot using configuration found in: {0}'.format(args.config))

    protocol_greenlets = list()
    servers = list()

    template_base = os.path.join(template, 'template.xml')
    if os.path.isfile(template_base):
        #validate_template(template_base)
        dom_base = etree.parse(template_base)
    else:
        logger.error('Could not access template configuration')
        sys.exit(1)

    session_manager = conpot_core.get_sessionManager()
    session_manager.initialize_databus(template_base)

    public_ip = None
    if config.getboolean('fetch_public_ip', 'enabled'):
        public_ip = ext_ip.get_ext_ip(config)

    template_http = os.path.join(template, 'http', 'http.xml')
    if os.path.isfile(template_http):
        #validate_template(template_http)
        dom_http = etree.parse(template_http)
        if dom_http.xpath('//http'):
            if ast.literal_eval(dom_http.xpath('//http/@enabled')[0]):
                http_host = dom_http.xpath('//http/@host')[0]
                http_port = ast.literal_eval(dom_http.xpath('//http/@port')[0])
                http_server = HTTPServer(http_host, http_port, template_http, os.path.join(package_directory,
                                                                                           'templates',
                                                                                           template,
                                                                                           'http'))
                servers.append(http_server)
                protocol_greenlets.append(gevent.spawn(http_server.start))
            else:
                logger.info('HTTP available but disabled by configuration.')
    else:
        logger.info('No HTTP template found. Service will remain unconfigured/stopped.')

    template_kamstrup_meter = os.path.join(template, 'kamstrup_meter', 'kamstrup_meter.xml')
    if os.path.isfile(template_kamstrup_meter):
        #validate_template(template_kamstrup)
        dom_kamstrup = etree.parse(template_kamstrup_meter)
        if dom_kamstrup.xpath('//kamstrup_meter'):
            if ast.literal_eval(dom_kamstrup.xpath('//kamstrup_meter/@enabled')[0]):
                host = dom_kamstrup.xpath('//kamstrup_meter/@host')[0]
                port = ast.literal_eval(dom_kamstrup.xpath('//kamstrup_meter/@port')[0])
                kamstrup_instance = KamstrupServer(template_kamstrup_meter)
                kamstrup_server = kamstrup_instance.get_server(host, port)
                servers.append(kamstrup_server)
                protocol_greenlets.append(gevent.spawn(kamstrup_server.start))
            else:
                logger.info('Kamstrup available but disabled by configuration.')
    else:
        logger.info('No Kamstrup template found. Service will remain unconfigured/stopped.')

    template_kamstrup_management = os.path.join(template, 'kamstrup_management', 'kamstrup_management.xml')
    if os.path.isfile(template_kamstrup_meter):
        #validate_template(template_kamstrup)
        dom_kamstrup = etree.parse(template_kamstrup_management)
        if dom_kamstrup.xpath('//kamstrup_management'):
            if ast.literal_eval(dom_kamstrup.xpath('//kamstrup_management/@enabled')[0]):
                host = dom_kamstrup.xpath('//kamstrup_management/@host')[0]
                port = ast.literal_eval(dom_kamstrup.xpath('//kamstrup_management/@port')[0])
                kamstrup_instance = KamstrupManagementServer(template_kamstrup_management)
                kamstrup_server = kamstrup_instance.get_server(host, port)
                servers.append(kamstrup_server)
                protocol_greenlets.append(gevent.spawn(kamstrup_server.start))
            else:
                logger.info('Kamstrup available but disabled by configuration.')
    else:
        logger.info('No Kamstrup template found. Service will remain unconfigured/stopped.')

    template_modbus = os.path.join(template, 'modbus', 'modbus.xml')
    if os.path.isfile(template_modbus):
        #validate_template(template_modbus)
        dom_modbus = etree.parse(template_modbus)
        if dom_modbus.xpath('//modbus'):
            if ast.literal_eval(dom_modbus.xpath('//modbus/@enabled')[0]):
                modbus_host = dom_modbus.xpath('//modbus/@host')[0]
                modbus_port = ast.literal_eval(dom_modbus.xpath('//modbus/@port')[0])
                modbus_server = ModbusServer(template_modbus)
                modbus_server = modbus_server.get_server(modbus_host, modbus_port)
                servers.append(modbus_server)
                protocol_greenlets.append(gevent.spawn(modbus_server.start))
            else:
                logger.info('Modbus available but disabled by configuration.')
    else:
        logger.info('No Modbus template found. Service will remain unconfigured/stopped.')

    template_s7comm = os.path.join(template, 's7comm', 's7comm.xml')
    if os.path.isfile(template_s7comm):
        #validate_template(template_s7comm)
        dom_s7comm = etree.parse(template_s7comm)
        if dom_s7comm.xpath('//s7comm'):
            if ast.literal_eval(dom_s7comm.xpath('//s7comm/@enabled')[0]):
                s7_host = dom_s7comm.xpath('//s7comm/@host')[0]
                s7_port = ast.literal_eval(dom_s7comm.xpath('//s7comm/@port')[0])
                s7_instance = S7Server(template_s7comm)
                s7_server = s7_instance.get_server(s7_host, s7_port)
                servers.append(s7_server)
                protocol_greenlets.append(gevent.spawn(s7_server.start))
            else:
                logger.info('S7comm available but disabled by configuration.')
    else:
        logger.info('No s7comm template found. Service will remain unconfigured/stopped.')

    template_snmp = os.path.join(template, 'snmp', 'snmp.xml')
    if os.path.isfile(template_snmp):
        #validate_template(template_snmp)
        dom_snmp = etree.parse(template_snmp)
        if dom_snmp.xpath('//snmp'):
            if ast.literal_eval(dom_snmp.xpath('//snmp/@enabled')[0]):

                if args.mibpaths:
                    compiled_mibs = args.mibpaths
                else:
                    compiled_mibs = [os.path.join(template, 'snmp', 'mibs_compiled')]

                if args.raw_mib:
                    raw_mibs = args.raw_mib
                else:
                    raw_mibs = [os.path.join(template, 'snmp', 'mibs_raw')]

                snmp_host = dom_snmp.xpath('//snmp/@host')[0]
                snmp_port = ast.literal_eval(dom_snmp.xpath('//snmp/@port')[0])
                snmp_server = SNMPServer(snmp_host, snmp_port, template_snmp, compiled_mibs, raw_mibs)
                servers.append(snmp_server)
                protocol_greenlets.append(gevent.spawn(snmp_server.start))
            else:
                logger.info('SNMP available but disabled by template.')
    else:
        logger.info('No SNMP template found. Service will remain unconfigured/stopped.')

    log_worker = LogWorker(config, dom_base, session_manager, public_ip)
    gevent.spawn(log_worker.start)

    template_proxy = os.path.join(template, 'proxy', 'proxy.xml')
    if os.path.isfile(template_proxy):
        #validate_template(template_proxy)
        dom_proxy = etree.parse(template_proxy)
        if dom_proxy.xpath('//proxies'):
            if ast.literal_eval(dom_proxy.xpath('//proxies/@enabled')[0]):
                proxies = dom_proxy.xpath('//proxies/*')
                for p in proxies:
                    name = p.attrib['name']
                    host = p.attrib['host']
                    keyfile = None
                    certfile = None
                    if 'keyfile' in p.attrib and 'certfile' in p.attrib:
                        keyfile = p.attrib['keyfile']
                        certfile = p.attrib['certfile']

                        # if path is absolute we assert that the cert and key is located in
                        # the templates ssl standard location

                        if not os.path.isabs(keyfile):
                            keyfile = os.path.join(os.path.dirname(template), 'ssl', keyfile)
                            certfile = os.path.join(os.path.dirname(template), 'ssl', certfile)
                    port = ast.literal_eval(p.attrib['port'])
                    proxy_host = p.xpath('./proxy_host/text()')[0]
                    proxy_port = ast.literal_eval(p.xpath('./proxy_port/text()')[0])
                    decoder = p.xpath('./decoder/text()')
                    if len(decoder) > 0:
                        decoder = decoder[0]
                    else:
                        decoder = None
                    proxy_instance = Proxy(name, proxy_host, proxy_port, decoder, keyfile, certfile)
                    proxy_server = proxy_instance.get_server(host, port)
                    servers.append(proxy_instance)
                    protocol_greenlets.append(gevent.spawn(proxy_server.start))
            else:
                logger.info('Proxy available but disabled by template.')
    else:
            logger.info('No proxy template found. Service will remain unconfigured/stopped.')

    # Wait for the services to bind ports before dropping privileges
    gevent.sleep(5)
    drop_privileges()
    try:
        if len(protocol_greenlets) > 0:
            gevent.wait()
    except KeyboardInterrupt:
        logging.info('Stopping Conpot')
        for server in servers:
            server.stop()
    finally:
        # Just being nice and cosy!
        gevent.joinall(protocol_greenlets, 2)


if __name__ == "__main__":
    main()
